"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞
"""

import os
from typing import Literal

from g4f.integration.pydantic_ai import AIModel

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
from g4f.Provider import PollinationsAI


# –ü—Ä–æ—Å—Ç–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è PollinationsAI
class SimpleFixedPollinationsAI(PollinationsAI):
    @classmethod
    async def create_async_generator(
        cls, model: str, messages: list, proxy=None, **kwargs
    ):
        """–ò—Å–ø—Ä–∞–≤–ª—è–µ–º create_async_generator"""
        print(f"üîß SimpleFixedPollinationsAI.create_async_generator: –∏—Å–ø—Ä–∞–≤–ª—è–µ–º kwargs")

        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º None extra_body
        if "extra_body" in kwargs and kwargs["extra_body"] is None:
            print("üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º None extra_body")
            kwargs["extra_body"] = {}

        if "extra_body" not in kwargs:
            print("üîß –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π extra_body")
            kwargs["extra_body"] = {}

        print(f"üîß kwargs –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: extra_body = {kwargs.get('extra_body')}")

        try:
            async for chunk in super().create_async_generator(
                model, messages, proxy=proxy, **kwargs
            ):
                yield chunk
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ super().create_async_generator: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            if "logprobs" in str(e):
                print("üîß –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ logprobs, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –æ—Ç–≤–µ—Ç")
                yield '{"title": "Fallback Menu", "items": [{"id": 1, "intent": "Test Task", "task": "This is a test task"}], "exit_option": "Exit"}'
            else:
                yield "AI service temporarily unavailable. Please try again later."


from pydantic_ai import Agent, RunContext

from core.models import GeneratedCode, InterfaceMessages, TaskMenu


class UniversalAgentSystem:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞"""

    def __init__(self, model_name: str = "gpt-4o", provider=SimpleFixedPollinationsAI):
        self.text_model = AIModel(model_name, provider)
        self._setup_agents()

    def _setup_agents(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤"""

        # –ê–ì–ï–ù–¢ 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ–Ω—é —Å —Ç—É–ª–∑–æ–º —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        self.menu_agent = Agent(
            model=self.text_model,
            system_prompt="""You are a universal menu generator for programming tasks.
            
            Your job:
            1. Use read_task_file tool to get file content from specified path
            2. Parse all tasks from the file
            3. Create menu items with structure: {id, intent, task}
            
            For each task:
            - id: task number (starting from 1)
            - intent: brief description (2-4 words) in specified language
            - task: full task description in specified language
            
            Create user-friendly menu with proper title and exit option.
            Handle any file format - extract tasks regardless of structure.""",
            output_retries=3,
            output_type=TaskMenu,
        )

        @self.menu_agent.tool
        def read_task_file(ctx: RunContext[None], file_path: str) -> str:
            """–ß–∏—Ç–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ —Å –∑–∞–¥–∞–Ω–∏—è–º–∏ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏"""
            try:
                if not os.path.exists(file_path):
                    return f"–§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω"

                with open(file_path, "r", encoding="utf-8") as f:
                    content = f.read()
                return content
            except Exception as e:
                return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}"

        # –ê–ì–ï–ù–¢ 2: –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.translator_agent = Agent(
            model=self.text_model,
            system_prompt="""You are a universal interface translator.
            Translate standard interface messages to the specified language naturally.
            Handle any number of tasks and adapt messages accordingly.""",
            output_retries=3,
            output_type=InterfaceMessages,
        )

        @self.translator_agent.tool
        def get_base_messages(ctx: RunContext[None], task_count: int) -> str:
            """–ü–æ–ª—É—á–∞–µ—Ç –±–∞–∑–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞"""
            return f"""
            Base messages to translate:
            1. input_prompt: "Enter task number (0-{task_count}): "
            2. goodbye: "Goodbye! üëã"
            3. invalid_choice: "Invalid choice. Please try again."
            4. generating: "Generating code for task"
            5. generated_code_header: "GENERATED CODE:"
            6. save_prompt: "Save code to file? (y/n): "
            7. saved_message: "Code saved to file:"
            8. error_message: "Error generating code:"
            """

        # –ê–ì–ï–ù–¢ 3: –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–¥–∞
        self.code_agent = Agent(
            model=self.text_model,
            system_prompt="""You are a universal Python code generator.
            Generate clean, executable Python code based on any task description.
            
            Requirements:
            - Code must be ready for execution
            - Add comments in specified language
            - Use Python best practices
            - NO markdown blocks
            - NO explanations, only code
            - Handle any programming task type
            - Generate complete, working solutions""",
            output_retries=3,
            output_type=GeneratedCode,
        )

    async def generate_menu(
        self, file_path: str, language: Literal["en", "uk", "ru"]
    ) -> TaskMenu | None:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–µ–Ω—é –∏–∑ —Ñ–∞–π–ª–∞ —Å –∑–∞–¥–∞–Ω–∏—è–º–∏"""
        try:
            prompt = f"""
            Create a menu in {language} language.
            Use read_task_file tool to get tasks from file: {file_path}
            
            Language: {language}
            Menu title: {
                "Select task for code generation:"
                if language == "en"
                else "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞:"
                if language == "ru"
                else "–û–±–µ—Ä—ñ—Ç—å –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∫–æ–¥—É:"
            }
            Exit option: {
                "Exit" if language == "en" else "–í—ã—Ö–æ–¥" if language == "ru" else "–í–∏—Ö—ñ–¥"
            }
            
            For each task create menu item with:
            - id: task number (starting from 1)
            - intent: brief description (2-4 words) in {language}
            - task: full task description in {language}
            
            File path: {file_path}
            """

            result = await self.menu_agent.run(prompt)
            return result.output
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ–Ω—é: {e}")
            return None

    async def translate_messages(
        self, language: Literal["en", "uk", "ru"], task_count: int
    ) -> InterfaceMessages:
        """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        if language == "en":
            return InterfaceMessages(
                locale="en",
                input_prompt=f"\nEnter task number (0-{task_count}): ",
                goodbye="Goodbye! üëã",
                invalid_choice="‚ùå Invalid choice. Please try again.",
                generating="üîÑ Generating code for task",
                generated_code_header="GENERATED CODE:",
                save_prompt="\nSave code to file? (y/n): ",
                saved_message="Code saved to file:",
                error_message="‚ùå Error generating code:",
            )

        try:
            target_language = "Ukrainian" if language == "uk" else "Russian"

            prompt = f"""
            Translate interface messages to {target_language} language.
            Use the get_base_messages tool to get the base messages for translation.
            Task count: {task_count}
            Target language: {language}
            """

            result = await self.translator_agent.run(prompt)
            return result.output
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            # Fallback –ø–µ—Ä–µ–≤–æ–¥—ã
            if language == "uk":
                return InterfaceMessages(
                    locale="uk",
                    input_prompt=f"\n–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∑–∞–≤–¥–∞–Ω–Ω—è (0-{task_count}): ",
                    goodbye="–î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è! üëã",
                    invalid_choice="‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
                    generating="üîÑ –ì–µ–Ω–µ—Ä—É—î–º–æ –∫–æ–¥ –¥–ª—è –∑–∞–≤–¥–∞–Ω–Ω—è",
                    generated_code_header="–ó–ì–ï–ù–ï–†–û–í–ê–ù–ò–ô –ö–û–î:",
                    save_prompt="\n–ó–±–µ—Ä–µ–≥—Ç–∏ –∫–æ–¥ —É —Ñ–∞–π–ª? (y/n): ",
                    saved_message="–ö–æ–¥ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É —Ñ–∞–π–ª:",
                    error_message="‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∫–æ–¥—É:",
                )
            else:  # ru
                return InterfaceMessages(
                    locale="ru",
                    input_prompt=f"\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ (0-{task_count}): ",
                    goodbye="–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! üëã",
                    invalid_choice="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                    generating="üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–æ–¥ –¥–ª—è –∑–∞–¥–∞—á–∏",
                    generated_code_header="–°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù–ù–´–ô –ö–û–î:",
                    save_prompt="\n–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–¥ –≤ —Ñ–∞–π–ª? (y/n): ",
                    saved_message="–ö–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª:",
                    error_message="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞:",
                )

    async def generate_code(
        self, task_item, language: Literal["en", "uk", "ru"]
    ) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–¥ –¥–ª—è –∑–∞–¥–∞—á–∏"""
        try:
            language_instructions = {
                "uk": "Add comments in Ukrainian",
                "ru": "Add comments in Russian",
                "en": "Add comments in English",
            }

            prompt = f"""
            Generate Python code for the following task:
            
            Task ID: {task_item.id}
            Intent: {task_item.intent}
            Task: {task_item.task}
            
            Code language: {language}
            Instructions: {language_instructions[language]}
            
            Requirements:
            - Generate clean, executable Python code
            - NO markdown blocks (```python)
            - NO explanations, only code
            - Use Python best practices
            - Create complete working solution
            """

            result = await self.code_agent.run(prompt)
            generated_code = result.output

            # –û—á–∏—â–∞–µ–º –∫–æ–¥ –æ—Ç –≤–æ–∑–º–æ–∂–Ω–æ–π markdown —Ä–∞–∑–º–µ—Ç–∫–∏
            cleaned_code = self._clean_code(generated_code.code)
            return cleaned_code

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞: {e}")
            # Fallback –∫–æ–¥
            if language == "uk":
                return f"""# –ó–∞–≤–¥–∞–Ω–Ω—è {task_item.id}: {task_item.intent}
# {task_item.task}

def main():
    \"\"\"–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–≤–¥–∞–Ω–Ω—è {task_item.id}\"\"\"
    print("–†–æ–∑–≤'—è–∑–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è {task_item.id}")
    print("–û–ø–∏—Å: {task_item.intent}")
    print("–ü–æ–≤–Ω–∏–π –æ–ø–∏—Å: {task_item.task}")
    
    # TODO: –†–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –∑–∞–≤–¥–∞–Ω–Ω—è
    pass

if __name__ == "__main__":
    main()
"""
            elif language == "ru":
                return f"""# –ó–∞–¥–∞—á–∞ {task_item.id}: {task_item.intent}
# {task_item.task}

def main():
    \"\"\"–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏ {task_item.id}\"\"\"
    print("–†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ {task_item.id}")
    print("–û–ø–∏—Å–∞–Ω–∏–µ: {task_item.intent}")
    print("–ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {task_item.task}")
    
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –∑–∞–¥–∞—á–∏
    pass

if __name__ == "__main__":
    main()
"""
            else:  # en
                return f"""# Task {task_item.id}: {task_item.intent}
# {task_item.task}

def main():
    \"\"\"Main function for task {task_item.id}\"\"\"
    print("Solution for task {task_item.id}")
    print("Description: {task_item.intent}")
    print("Full description: {task_item.task}")
    
    # TODO: Implement task logic
    pass

if __name__ == "__main__":
    main()
"""

    def _clean_code(self, code: str) -> str:
        """–û—á–∏—â–∞–µ—Ç –∫–æ–¥ –æ—Ç markdown"""
        if not code:
            return code

        code = code.strip()

        # –£–¥–∞–ª—è–µ–º markdown –±–ª–æ–∫–∏
        if code.startswith("```python"):
            code = code[9:]
        elif code.startswith("```"):
            code = code[3:]

        if code.endswith("```"):
            code = code[:-3]

        return code.strip()
        return code.strip()
        return code.strip()
