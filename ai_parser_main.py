"""
Code generator with AI task parsing - simple and efficient
"""

import json
import os
import re
from datetime import datetime

import g4f

# Localization dictionaries (shortened)
TRANSLATIONS = {
    "en": {
        "title": "ü§ñ Universal Python Code Generator",
        "generating": "üîÑ Generating code for:",
        "code_generated": "‚úÖ Code generated successfully",
        "generated_code": "GENERATED CODE:",
        "tasks_found": "üîç Tasks found in file:",
        "save_prompt": "\nSave code to file? (y/n): ",
        "run_prompt": "Run generated code? (y/n): ",
        "file_saved": "File saved:",
        "goodbye": "Goodbye! üëã",
    },
    "uk": {
        "title": "ü§ñ –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä Python –∫–æ–¥—É",
        "generating": "üîÑ –ì–µ–Ω–µ—Ä—É—î–º–æ –∫–æ–¥ –¥–ª—è:",
        "code_generated": "‚úÖ –ö–æ–¥ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ",
        "generated_code": "–ó–ì–ï–ù–ï–†–û–í–ê–ù–ò–ô –ö–û–î:",
        "tasks_found": "üîç –ó–Ω–∞–π–¥–µ–Ω–æ –∑–∞–≤–¥–∞–Ω—å —É —Ñ–∞–π–ª—ñ:",
        "save_prompt": "\n–ó–±–µ—Ä–µ–≥—Ç–∏ –∫–æ–¥ —É —Ñ–∞–π–ª? (y/n): ",
        "run_prompt": "–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–π –∫–æ–¥? (y/n): ",
        "file_saved": "–§–∞–π–ª –∑–±–µ—Ä–µ–∂–µ–Ω–æ:",
        "goodbye": "–î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è! üëã",
    },
    "ru": {
        "title": "ü§ñ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä Python –∫–æ–¥–∞",
        "generating": "üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –¥–ª—è:",
        "code_generated": "‚úÖ –ö–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ",
        "generated_code": "–°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù–ù–´–ô –ö–û–î:",
        "tasks_found": "üîç –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π –≤ —Ñ–∞–π–ª–µ:",
        "save_prompt": "\n–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–¥ –≤ —Ñ–∞–π–ª? (y/n): ",
        "run_prompt": "–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥? (y/n): ",
        "file_saved": "–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω:",
        "goodbye": "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! üëã",
    },
}


def get_text(key: str, language: str) -> str:
    """Gets localized text"""
    return TRANSLATIONS.get(language, TRANSLATIONS["en"]).get(key, key)


def clean_code(code: str) -> str:
    """Cleans code from markdown blocks"""
    if not code:
        return code

    code = code.strip()

    if code.startswith("```python"):
        code = code[9:]
    elif code.startswith("```"):
        code = code[3:]

    if code.endswith("```"):
        code = code[:-3]

    return code.strip()


def fix_square_spacing(code: str) -> str:
    """Fixes square code for visual equal-sidedness"""
    if "–∫–≤–∞–¥—Ä–∞—Ç" in code.lower() or "square" in code.lower() or "*" in code:
        # Replace asterisk sequences with spaced asterisks
        code = re.sub(r'"(\*+)"', lambda m: '"' + " ".join(m.group(1)) + '"', code)
        code = re.sub(r"'(\*+)'", lambda m: "'" + " ".join(m.group(1)) + "'", code)

        # Replace single asterisks with spaced asterisks
        code = code.replace('print("*", end="")', 'print("* ", end="")')
        code = code.replace("print('*', end='')", "print('* ', end='')")
        code = code.replace('print(" ", end="")', 'print("  ", end="")')
        code = code.replace("print(' ', end='')", "print('  ', end='')")

    return code


def parse_tasks_with_ai(content: str, language: str = "en") -> list:
    """Parses tasks using AI - simple and efficient approach"""
    try:
        print("ü§ñ AI task parsing...")

        response = g4f.ChatCompletion.create(
            model="gpt-4o",
            provider=g4f.Provider.PollinationsAI,
            messages=[
                {
                    "role": "user",
                    "content": f"""
                Parse this text and extract ALL programming tasks. Return ONLY a JSON array with this exact format:
                [
                    {{"id": 1, "description": "Task description here"}},
                    {{"id": 2, "description": "Task description here"}},
                    ...
                ]

                Rules:
                - Find ALL tasks, including those with numbers 1), 2), etc.
                - Find tasks that start with "‚Äì" (dash)
                - Find tasks about "—Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é" (create function)
                - Find tasks about "–≤–∏–≤–µ—Å—Ç–∏" (output/display)
                - Find tasks about list comprehension
                - Find tasks about multiplication tables (—Ç–∞–±–ª–∏—á–∫—É –º–Ω–æ–∂–µ–Ω–Ω—è)
                - Find tasks about while loops and for loops
                - Remove task numbers like "1)", "2)" from descriptions
                - Make first letter uppercase
                - Include ALL tasks, don't merge duplicates
                - Return ONLY valid JSON, no explanations

                Text to parse:
                {content}
                """,
                }
            ],
        )

        # Clean response from markdown
        cleaned_response = clean_code(response)

        # Try to parse JSON
        try:
            tasks_data = json.loads(cleaned_response)
            if isinstance(tasks_data, list):
                return tasks_data
        except json.JSONDecodeError:
            # If JSON is invalid, try to extract array
            json_match = re.search(r"\[.*\]", cleaned_response, re.DOTALL)
            if json_match:
                try:
                    tasks_data = json.loads(json_match.group())
                    if isinstance(tasks_data, list):
                        return tasks_data
                except json.JSONDecodeError:
                    pass

        print("‚ùå Task parsing error")
        return []

    except Exception as e:
        print(f"‚ùå AI parsing error: {e}")
        return []


def generate_code(task_description: str, language: str = "en") -> dict:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–¥ –¥–ª—è –∑–∞–¥–∞—á–∏"""
    try:
        print(f"{get_text('generating', language)} {task_description[:60]}...")

        lang_instructions = {
            "ru": "Add comments in Russian",
            "uk": "Add comments in Ukrainian",
            "en": "Add comments in English",
        }

        response = g4f.ChatCompletion.create(
            model="gpt-4o",
            provider=g4f.Provider.PollinationsAI,
            messages=[
                {
                    "role": "user",
                    "content": f"""
                Generate Python code for this task: {task_description}

                Requirements:
                - Clean, executable Python code
                - {lang_instructions.get(language, "Add comments in English")}
                - Use Python best practices
                - NO markdown blocks
                - NO explanations, only code
                - Create complete working solution
                
                Return ONLY the Python code, nothing else.
                """,
                }
            ],
        )

        cleaned_code = clean_code(response)
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–≤–∞–¥—Ä–∞—Ç—ã –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–π —Ä–∞–≤–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–æ—Å—Ç–∏
        cleaned_code = fix_square_spacing(cleaned_code)

        print(get_text("code_generated", language))

        return {
            "success": True,
            "code": cleaned_code,
            "task": task_description,
            "language": language,
            "error": None,
        }

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞: {e}")
        fallback_code = f"""# –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞: {e}
# –ó–∞–¥–∞—á–∞: {task_description}

def main():
    print("–ö–æ–¥ –Ω–µ –±—ã–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏")
    print("–ó–∞–¥–∞—á–∞: {task_description}")

if __name__ == "__main__":
    main()
"""
        return {
            "success": False,
            "code": fallback_code,
            "task": task_description,
            "language": language,
            "error": str(e),
        }


def save_code(code: str, task_name: str, task_id: int = 1, language: str = "en") -> str:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–¥ –≤ —Ñ–∞–π–ª"""
    try:
        output_dir = "generated_code"
        if not os.path.exists(output_dir):
            os.makedirs(output_dir)

        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        safe_name = "".join(
            c for c in task_name if c.isalnum() or c in (" ", "-", "_")
        ).strip()
        safe_name = safe_name.replace(" ", "_").lower()

        filename = f"task_{task_id}_{safe_name}_{timestamp}.py"
        filepath = os.path.join(output_dir, filename)

        with open(filepath, "w", encoding="utf-8") as f:
            f.write(code)

        print(f"‚úÖ {get_text('file_saved', language)} {filepath}")
        return filepath

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
        return ""


def get_language_choice() -> str:
    """–í—ã–±–æ—Ä —è–∑—ã–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    print(
        "\nSelect interface language / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ / –û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É:"
    )
    print("1. English (en) [default]")
    print("2. –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ (uk)")
    print("3. –†—É—Å—Å–∫–∏–π (ru)")

    choice = input("Enter choice (1-3) [1]: ").strip()

    if choice == "2":
        return "uk"
    elif choice == "3":
        return "ru"
    else:
        return "en"


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å AI-–ø–∞—Ä—Å–∏–Ω–≥–æ–º"""
    # –í—ã–±–æ—Ä —è–∑—ã–∫–∞
    language = get_language_choice()

    print(f"\n{get_text('title', language)}")
    print("=" * 50)
    print("üìÅ AI-–ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–¥–∞—á –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è")

    # –°–∫–∞–Ω–∏—Ä—É–µ–º –ø–∞–ø–∫—É tasks
    tasks_dir = "tasks"
    if not os.path.exists(tasks_dir):
        print(f"‚ùå –ü–∞–ø–∫–∞ {tasks_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return

    # –ù–∞—Ö–æ–¥–∏–º —Ñ–∞–π–ª—ã –∑–∞–¥–∞–Ω–∏–π
    task_files = []
    for filename in os.listdir(tasks_dir):
        if filename.endswith(".txt"):
            filepath = os.path.join(tasks_dir, filename)
            description = filename.replace(".txt", "").replace("_", " ").title()
            task_files.append(
                {
                    "id": len(task_files) + 1,
                    "filename": filename,
                    "filepath": filepath,
                    "description": description,
                }
            )

    if not task_files:
        print("‚ùå –í –ø–∞–ø–∫–µ tasks –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –∑–∞–¥–∞–Ω–∏–π (.txt)")
        return

    print(f"\nüìÇ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –∑–∞–¥–∞–Ω–∏–π: {len(task_files)}")

    # –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞ –∑–∞–¥–∞–Ω–∏–π
    while True:
        print("\nüìÅ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –∑–∞–¥–∞–Ω–∏–π:")
        for file in task_files:
            print(f"{file['id']}. {file['description']} ({file['filename']})")
        print("0. –í—ã—Ö–æ–¥")

        choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ñ–∞–π–ª–∞ (0 –¥–ª—è –≤—ã—Ö–æ–¥–∞): ").strip()

        if choice == "0":
            print(get_text("goodbye", language))
            return

        try:
            file_id = int(choice)
            selected_file = next((f for f in task_files if f["id"] == file_id), None)

            if selected_file:
                print(f"‚úÖ –í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª: {selected_file['description']}")

                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
                try:
                    with open(selected_file["filepath"], "r", encoding="utf-8") as f:
                        content = f.read()

                    # –ü–∞—Ä—Å–∏–º –∑–∞–¥–∞—á–∏ —Å –ø–æ–º–æ—â—å—é AI
                    tasks = parse_tasks_with_ai(content, language)

                    if not tasks:
                        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∑–∞–¥–∞—á–∏ –∏–∑ —Ñ–∞–π–ª–∞")
                        continue

                    print(f"‚úÖ {get_text('tasks_found', language)} {len(tasks)}")

                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∑–∞–¥–∞—á
                    while True:
                        print(f"\nüìã –ó–∞–¥–∞—á–∏ –∏–∑ —Ñ–∞–π–ª–∞ {selected_file['filename']}:")
                        print("-" * 70)

                        # –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É –Ω–æ–º–µ—Ä–∞ –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
                        max_num_width = len(str(len(tasks)))

                        for i, task in enumerate(tasks, 1):
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–ø–µ—Ä–≤—ã–µ 60 —Å–∏–º–≤–æ–ª–æ–≤)
                            desc = task.get("description", "")
                            short_desc = desc[:60] + "..." if len(desc) > 60 else desc
                            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –æ—Ç—Å—Ç—É–ø–∞–º–∏
                            print(f"{i:>{max_num_width}}. {short_desc}")

                        print(f"{0:>{max_num_width}}. –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ñ–∞–π–ª–∞")
                        print("-" * 70)

                        task_choice = input(
                            "\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É (0 –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞): "
                        ).strip()

                        if task_choice == "0":
                            break

                        try:
                            task_id = int(task_choice)
                            if 1 <= task_id <= len(tasks):
                                selected_task = tasks[task_id - 1]

                                print(f"\nüìù –í—ã–±—Ä–∞–Ω–∞ –∑–∞–¥–∞—á–∞ {task_id}:")
                                print(
                                    f"üìã –û–ø–∏—Å–∞–Ω–∏–µ: {selected_task.get('description', '')}"
                                )

                                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥
                                result = generate_code(
                                    selected_task.get("description", ""), language
                                )

                                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–¥
                                print("\n" + "=" * 50)
                                if result["success"]:
                                    print(get_text("generated_code", language))
                                    print("=" * 50)
                                    print(result["code"])
                                    print("=" * 50)

                                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥
                                    save_choice = input(
                                        get_text("save_prompt", language)
                                    ).lower()
                                    if save_choice == "y":
                                        filepath = save_code(
                                            result["code"],
                                            f"task_{task_id}",
                                            task_id,
                                            language,
                                        )
                                        if filepath:
                                            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–¥
                                            run_choice = input(
                                                get_text("run_prompt", language)
                                            ).lower()
                                            if run_choice == "y":
                                                try:
                                                    print("\nüîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–¥...")
                                                    print("-" * 30)
                                                    exec(result["code"])
                                                    print("-" * 30)
                                                    print("‚úÖ –ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                                                except Exception as e:
                                                    print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
                                else:
                                    print("–û–®–ò–ë–ö–ê –ì–ï–ù–ï–†–ê–¶–ò–ò –ö–û–î–ê:")
                                    print("=" * 50)
                                    print(f"–û—à–∏–±–∫–∞: {result['error']}")
                                    print("–†–µ–∑–µ—Ä–≤–Ω—ã–π –∫–æ–¥:")
                                    print(result["code"])
                                    print("=" * 50)
                            else:
                                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏")

                        except ValueError:
                            print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä")

                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
                    continue

            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ñ–∞–π–ª–∞.")
        except KeyboardInterrupt:
            print(f"\n\n{get_text('goodbye', language)}")
            return


if __name__ == "__main__":
    main()
