"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–¥–∞ —Å –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
"""

import asyncio
import os
from datetime import datetime
from typing import List, Literal

from agents.universal_agents import UniversalAgentSystem
from core.models import AgentConfig, GenerationResult, TaskFile, TaskFileMenu, TaskMenu


class UniversalCodeGenerator:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–¥–∞ –¥–ª—è –ª—é–±—ã—Ö –∑–∞–¥–∞–Ω–∏–π"""

    def __init__(self, config: AgentConfig):
        self.config = config
        self.agent_system = UniversalAgentSystem(
            model_name=config.ai_model, provider=self._get_provider(config.provider)
        )
        self._ensure_output_directory()

    def _get_provider(self, provider_name: str):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –ø–æ –∏–º–µ–Ω–∏"""
        if provider_name == "PollinationsAI":
            from agents.universal_agents import SimpleFixedPollinationsAI

            return SimpleFixedPollinationsAI
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º SimpleFixedPollinationsAI
        else:
            from agents.universal_agents import SimpleFixedPollinationsAI

            return SimpleFixedPollinationsAI

    def _ensure_output_directory(self):
        """–°–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –≤—ã–≤–æ–¥–∞ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç"""
        if not os.path.exists(self.config.output_directory):
            os.makedirs(self.config.output_directory)

    def get_language_choice(self) -> Literal["en", "uk", "ru"]:
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤—ã–±–æ—Ä —è–∑—ã–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        print(
            "\nSelect interface language / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ / –û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É:"
        )
        print("1. English (en) [default]")
        print("2. –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ (uk)")
        print("3. –†—É—Å—Å–∫–∏–π (ru)")

        choice = input("Enter choice (1-3) [1]: ").strip()

        if choice == "2":
            return "uk"
        elif choice == "3":
            return "ru"
        else:
            return "en"

    def get_code_language_choice(self) -> Literal["en", "uk", "ru"]:
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤—ã–±–æ—Ä —è–∑—ã–∫–∞ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ –∫–æ–¥–µ"""
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ –∫–æ–¥–µ:")
        print("1. English (en) [default]")
        print("2. –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ (uk)")
        print("3. –†—É—Å—Å–∫–∏–π (ru)")

        lang_choice = input("Enter choice (1-3) [1]: ").strip()
        return "uk" if lang_choice == "2" else "ru" if lang_choice == "3" else "en"

    def show_menu(self, menu: TaskMenu) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é, –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ –ø–æ id –∏ intent"""
        print(f"\n{menu.title}")
        for item in menu.items:
            print(f"{item.id}. {item.intent}")
        print(f"0. {menu.exit_option}")

    def scan_task_files(self) -> List[TaskFile]:
        """–°–∫–∞–Ω–∏—Ä—É–µ—Ç –ø–∞–ø–∫—É tasks –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∑–∞–¥–∞–Ω–∏–π"""
        task_files = []
        tasks_dir = self.config.tasks_directory

        if not os.path.exists(tasks_dir):
            print(f"‚ùå –ü–∞–ø–∫–∞ {tasks_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return task_files

        file_id = 1
        for filename in os.listdir(tasks_dir):
            if filename.endswith(".txt"):
                filepath = os.path.join(tasks_dir, filename)

                # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
                description = filename.replace(".txt", "").replace("_", " ").title()

                task_files.append(
                    TaskFile(
                        id=file_id,
                        filename=filename,
                        filepath=filepath,
                        description=description,
                    )
                )
                file_id += 1

        return task_files

    def show_file_menu(self, files: List[TaskFile]) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤ –∑–∞–¥–∞–Ω–∏–π"""
        print("\nüìÅ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å –∑–∞–¥–∞–Ω–∏—è–º–∏:")
        for file in files:
            print(f"{file.id}. {file.description} ({file.filename})")
        print("0. –í—ã—Ö–æ–¥")

    def select_task_file(self) -> str | None:
        """–ü–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª –∑–∞–¥–∞–Ω–∏–π –∏–∑ –ø–∞–ø–∫–∏ tasks"""
        task_files = self.scan_task_files()

        if not task_files:
            print("‚ùå –í –ø–∞–ø–∫–µ tasks –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ —Å –∑–∞–¥–∞–Ω–∏—è–º–∏ (.txt)")
            return None

        print(f"\nüìÇ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –∑–∞–¥–∞–Ω–∏–π: {len(task_files)}")

        while True:
            self.show_file_menu(task_files)

            choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ñ–∞–π–ª–∞ (0 –¥–ª—è –≤—ã—Ö–æ–¥–∞): ").strip()

            if choice == "0":
                return None

            try:
                file_id = int(choice)
                selected_file = next((f for f in task_files if f.id == file_id), None)

                if selected_file:
                    print(f"‚úÖ –í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª: {selected_file.description}")
                    return selected_file.filepath
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            except ValueError:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ñ–∞–π–ª–∞.")

    async def save_generated_code(
        self, code: str, task_id: int, task_intent: str, task_file_path: str
    ) -> GenerationResult:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ –≤ –ø–∞–ø–∫—É —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º+–∏–º—è —Ñ–∞–π–ª–∞ –∑–∞–¥–∞–Ω–∏—è"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∑–∞–¥–∞–Ω–∏–π –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
            task_filename = os.path.basename(task_file_path).replace(".txt", "")

            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞ –∑–∞–¥–∞–Ω–∏–π
            task_output_dir = os.path.join(
                self.config.output_directory, f"generated_{task_filename}"
            )
            if not os.path.exists(task_output_dir):
                os.makedirs(task_output_dir)

            # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å timestamp
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            safe_intent = "".join(
                c for c in task_intent if c.isalnum() or c in (" ", "-", "_")
            ).rstrip()
            safe_intent = safe_intent.replace(" ", "_").lower()

            filename = f"task_{task_id}_{safe_intent}_{timestamp}.py"
            file_path = os.path.join(task_output_dir, filename)

            with open(file_path, "w", encoding="utf-8") as f:
                f.write(code)

            return GenerationResult(
                success=True,
                task_id=task_id,
                file_path=file_path,
                error_message=None,
                code_preview=code[:200] + "..." if len(code) > 200 else code,
            )
        except Exception as e:
            return GenerationResult(
                success=False,
                task_id=task_id,
                file_path=None,
                error_message=str(e),
                code_preview=None,
            )

    def show_error_and_exit(self, language: Literal["en", "uk", "ru"]) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º—É"""
        error_messages = {
            "uk": [
                "‚ùå –ü–æ–º–∏–ª–∫–∞: AI-–∞–≥–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π.",
                "–ü—Ä–æ–≥—Ä–∞–º–∞ –Ω–µ –º–æ–∂–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –±–µ–∑ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –º–µ–Ω—é.",
                "–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É.",
            ],
            "ru": [
                "‚ùå –û—à–∏–±–∫–∞: AI-–∞–≥–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.",
                "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ–Ω—é.",
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.",
            ],
            "en": [
                "‚ùå Error: AI agent unavailable.",
                "Program cannot work without menu generation.",
                "Please try later or check your internet connection.",
            ],
        }

        for message in error_messages[language]:
            print(message)

        exit(1)

    async def run(self):
        """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞"""
        print("ü§ñ Universal Python Code Generator")
        print("==================================")
        print(f"AI Model: {self.config.ai_model}")
        print(f"Provider: {self.config.provider}")
        print(f"Output Directory: {self.config.output_directory}")

        # –í—ã–±–∏—Ä–∞–µ–º —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        interface_language = self.get_language_choice()

        # –í—ã–±–∏—Ä–∞–µ–º —Ñ–∞–π–ª –∑–∞–¥–∞–Ω–∏–π –∏–∑ –ø–∞–ø–∫–∏ tasks
        task_file_path = self.select_task_file()
        if not task_file_path:
            print("‚ùå –§–∞–π–ª –∑–∞–¥–∞–Ω–∏–π –Ω–µ –≤—ã–±—Ä–∞–Ω. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
            return

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–µ–Ω—é –∏–∑ —Ñ–∞–π–ª–∞
        print("\nüé® –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–µ–Ω—é –∑–∞–¥–∞—á...")
        menu = await self.agent_system.generate_menu(task_file_path, interface_language)
        if not menu:
            self.show_error_and_exit(interface_language)

        print(f"‚úÖ –ú–µ–Ω—é —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {len(menu.items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")

        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        task_count = len(menu.items)
        print("üåê –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
        messages = await self.agent_system.translate_messages(
            interface_language, task_count
        )

        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≥—Ä–∞–º–º—ã
        valid_choices = [str(item.id) for item in menu.items] + ["0"]

        while True:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é, –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ –ø–æ id –∏ intent
            self.show_menu(menu)

            choice = input(messages.input_prompt).strip()

            if choice == "0":
                print(messages.goodbye)
                break
            elif choice in valid_choices[:-1]:  # –ò—Å–∫–ª—é—á–∞–µ–º "0"
                task_id = int(choice)

                # –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É
                selected_task = next(
                    (item for item in menu.items if item.id == task_id), None
                )
                if selected_task:
                    print(f"\n{messages.generating} {task_id}...")
                    print(f"üìù –ó–∞–¥–∞—á–∞: {selected_task.intent}")
                    print(f"üìã –û–ø–∏—Å–∞–Ω–∏–µ: {selected_task.task}")

                    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—ã–±–æ—Ä —è–∑—ã–∫–∞ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
                    code_language = self.get_code_language_choice()
                    print(f"üåê –í—ã–±—Ä–∞–Ω —è–∑—ã–∫ –¥–ª—è –∫–æ–¥–∞: {code_language}")

                    try:
                        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏
                        generated_code = await self.agent_system.generate_code(
                            selected_task, code_language
                        )

                        print("\n" + "=" * 50)
                        print(messages.generated_code_header)
                        print("=" * 50)
                        print(generated_code)
                        print("=" * 50)

                        # –û–ø—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–¥–∞ –≤ —Ñ–∞–π–ª
                        save_choice = input(messages.save_prompt).lower()
                        if save_choice == "y":
                            result = await self.save_generated_code(
                                generated_code,
                                task_id,
                                selected_task.intent,
                                task_file_path,
                            )
                            if result.success:
                                print(f"{messages.saved_message} {result.file_path}")
                            else:
                                print(
                                    f"{messages.error_message} {result.error_message}"
                                )

                    except Exception as e:
                        print(f"{messages.error_message} {e}")
                else:
                    print(messages.invalid_choice)
            else:
                print(messages.invalid_choice)


def create_default_config(task_file_path: str) -> AgentConfig:
    """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    return AgentConfig(
        task_file_path=task_file_path,
        output_directory="generated_code",
        default_language="en",
        ai_model="gpt-4o",
        provider="PollinationsAI",
    )


async def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞"""
    print("ü§ñ Universal Python Code Generator")
    print("==================================")
    print("üìÅ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä —Ñ–∞–π–ª–æ–≤ –∑–∞–¥–∞–Ω–∏–π –∏–∑ –ø–∞–ø–∫–∏ 'tasks'")

    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –ø—É—Å—Ç—ã–º —Ñ–∞–π–ª–æ–º (–±—É–¥–µ—Ç –≤—ã–±—Ä–∞–Ω –ø–æ–∑–∂–µ)
    config = create_default_config("")
    generator = UniversalCodeGenerator(config)
    await generator.run()


if __name__ == "__main__":
    asyncio.run(main())
