"""
–ü—Ä–æ—Å—Ç–æ–π —Ä–∞–±–æ—á–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–¥–∞ - –±–µ–∑ pydantic_ai
"""

import os
from datetime import datetime

import g4f


def clean_code(code: str) -> str:
    """–û—á–∏—â–∞–µ—Ç –∫–æ–¥ –æ—Ç markdown"""
    if not code:
        return code

    code = code.strip()

    # –£–¥–∞–ª—è–µ–º markdown –±–ª–æ–∫–∏
    if code.startswith("```python"):
        code = code[9:]
    elif code.startswith("```"):
        code = code[3:]

    if code.endswith("```"):
        code = code[:-3]

    return code.strip()


def generate_code(task_description: str, language: str = "ru") -> dict:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–¥ –¥–ª—è –∑–∞–¥–∞—á–∏ —Å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º"""
    try:
        print(f"üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –¥–ª—è: {task_description}")

        lang_instructions = {
            "ru": "Add comments in Russian",
            "uk": "Add comments in Ukrainian",
            "en": "Add comments in English",
        }

        # –ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        response = g4f.ChatCompletion.create(
            model="gpt-4o",
            provider=g4f.Provider.PollinationsAI,
            messages=[
                {
                    "role": "user",
                    "content": f"""
                Generate Python code for this task: {task_description}

                Requirements:
                - Clean, executable Python code
                - {lang_instructions.get(language, "Add comments in Russian")}
                - Use Python best practices
                - NO markdown blocks
                - NO explanations, only code
                - Create complete working solution

                Return ONLY the Python code, nothing else.
                """,
                }
            ],
        )

        cleaned_code = clean_code(response)
        print("‚úÖ –ö–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        return {
            "success": True,
            "code": cleaned_code,
            "task": task_description,
            "language": language,
            "error": None,
        }

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞: {e}")
        fallback_code = f"""# –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞: {e}
# –ó–∞–¥–∞—á–∞: {task_description}

def main():
    print("–ö–æ–¥ –Ω–µ –±—ã–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏")
    print("–ó–∞–¥–∞—á–∞: {task_description}")

if __name__ == "__main__":
    main()
"""
        return {
            "success": False,
            "code": fallback_code,
            "task": task_description,
            "language": language,
            "error": str(e),
        }


def save_code(code: str, task_name: str, task_id: int = 1) -> str:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–¥ –≤ —Ñ–∞–π–ª —Å –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π"""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞
        output_dir = "generated_code"
        if not os.path.exists(output_dir):
            os.makedirs(output_dir)

        # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        safe_name = "".join(
            c for c in task_name if c.isalnum() or c in (" ", "-", "_")
        ).strip()
        safe_name = safe_name.replace(" ", "_").lower()

        filename = f"task_{task_id}_{safe_name}_{timestamp}.py"
        filepath = os.path.join(output_dir, filename)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥
        with open(filepath, "w", encoding="utf-8") as f:
            f.write(code)

        print(f"‚úÖ –ö–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filepath}")
        return filepath

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
        return ""


def get_language_choice():
    """–í—ã–±–æ—Ä —è–∑—ã–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    print(
        "\nSelect interface language / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ / –û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É:"
    )
    print("1. English (en) [default]")
    print("2. –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ (uk)")
    print("3. –†—É—Å—Å–∫–∏–π (ru)")

    choice = input("Enter choice (1-3) [1]: ").strip()

    if choice == "2":
        return "uk"
    elif choice == "3":
        return "ru"
    else:
        return "en"


def load_tasks_from_file(filepath: str):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∑–∞–¥–∞—á–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open(filepath, "r", encoding="utf-8") as f:
            content = f.read()

        # –£–ª—É—á—à–µ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–¥–∞—á
        tasks = []
        lines = content.split("\n")
        current_task = ""

        for line in lines:
            line = line.strip()

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
            if not line or line.startswith("#"):
                continue

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å –Ω–æ–º–µ—Ä–∞ –∑–∞–¥–∞—á–∏
            if line.startswith(("1)", "2)", "3)", "4)", "5)", "6)", "7)", "8)")):
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∑–∞–¥–∞—á—É
                if current_task:
                    tasks.append(
                        {"id": len(tasks) + 1, "description": current_task.strip()}
                    )
                # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
                current_task = line
            elif current_task and line:
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∫–æ–¥–∞ –∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
                if not line.startswith(
                    ("st =", "greeting =", "list =", "–ø—Ä–∏–∫–ª–∞–¥:", "–Ω–∞–ø—Ä–∏–∫–ª–∞–¥:")
                ):
                    current_task += " " + line

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–¥–∞—á—É
        if current_task:
            tasks.append({"id": len(tasks) + 1, "description": current_task.strip()})

        print(f"üîç –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á –≤ —Ñ–∞–π–ª–µ: {len(tasks)}")
        for i, task in enumerate(tasks, 1):
            short_desc = (
                task["description"][:80] + "..."
                if len(task["description"]) > 80
                else task["description"]
            )
            print(f"   {i}. {short_desc}")

        return tasks

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {filepath}: {e}")
        return []


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("ü§ñ Universal Python Code Generator")
    print("==================================")
    print("üìÅ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä —Ñ–∞–π–ª–æ–≤ –∑–∞–¥–∞–Ω–∏–π –∏–∑ –ø–∞–ø–∫–∏ 'tasks'")

    # –í—ã–±–æ—Ä —è–∑—ã–∫–∞
    language = get_language_choice()

    # –°–∫–∞–Ω–∏—Ä—É–µ–º –ø–∞–ø–∫—É tasks
    tasks_dir = "tasks"
    if not os.path.exists(tasks_dir):
        print(f"‚ùå –ü–∞–ø–∫–∞ {tasks_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return

    # –ù–∞—Ö–æ–¥–∏–º —Ñ–∞–π–ª—ã –∑–∞–¥–∞–Ω–∏–π
    task_files = []
    for filename in os.listdir(tasks_dir):
        if filename.endswith(".txt"):
            filepath = os.path.join(tasks_dir, filename)
            description = filename.replace(".txt", "").replace("_", " ").title()
            task_files.append(
                {
                    "id": len(task_files) + 1,
                    "filename": filename,
                    "filepath": filepath,
                    "description": description,
                }
            )

    if not task_files:
        print("‚ùå –í –ø–∞–ø–∫–µ tasks –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ —Å –∑–∞–¥–∞–Ω–∏—è–º–∏ (.txt)")
        return

    print(f"\nüìÇ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –∑–∞–¥–∞–Ω–∏–π: {len(task_files)}")

    # –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞ –∑–∞–¥–∞–Ω–∏–π
    while True:
        print("\nüìÅ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å –∑–∞–¥–∞–Ω–∏—è–º–∏:")
        for file in task_files:
            print(f"{file['id']}. {file['description']} ({file['filename']})")
        print("0. –í—ã—Ö–æ–¥")

        choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ñ–∞–π–ª–∞ (0 –¥–ª—è –≤—ã—Ö–æ–¥–∞): ").strip()

        if choice == "0":
            print("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! üëã")
            return

        try:
            file_id = int(choice)
            selected_file = next((f for f in task_files if f["id"] == file_id), None)

            if selected_file:
                print(f"‚úÖ –í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª: {selected_file['description']}")

                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏ –∏–∑ —Ñ–∞–π–ª–∞
                tasks = load_tasks_from_file(selected_file["filepath"])

                if not tasks:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–¥–∞—á–∏ –∏–∑ —Ñ–∞–π–ª–∞")
                    continue

                print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–¥–∞—á: {len(tasks)}")

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∑–∞–¥–∞—á
                while True:
                    print(f"\nüìã –ó–∞–¥–∞—á–∏ –∏–∑ —Ñ–∞–π–ª–∞ {selected_file['filename']}:")
                    for task in tasks:
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–ø–µ—Ä–≤—ã–µ 50 —Å–∏–º–≤–æ–ª–æ–≤)
                        short_desc = (
                            task["description"][:50] + "..."
                            if len(task["description"]) > 50
                            else task["description"]
                        )
                        print(f"{task['id']}. {short_desc}")
                    print("0. –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ñ–∞–π–ª–∞")

                    task_choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É (0 –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞): ").strip()

                    if task_choice == "0":
                        break

                    try:
                        task_id = int(task_choice)
                        selected_task = next(
                            (t for t in tasks if t["id"] == task_id), None
                        )

                        if selected_task:
                            print(f"\nüìù –í—ã–±—Ä–∞–Ω–∞ –∑–∞–¥–∞—á–∞ {task_id}:")
                            print(f"üìã –û–ø–∏—Å–∞–Ω–∏–µ: {selected_task['description']}")

                            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥
                            result = generate_code(
                                selected_task["description"], language
                            )

                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–¥
                            print("\n" + "=" * 50)
                            if result["success"]:
                                print("–°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù–ù–´–ô –ö–û–î:")
                                print("=" * 50)
                                print(result["code"])
                                print("=" * 50)

                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥
                                save_choice = input(
                                    "\n–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–¥ –≤ —Ñ–∞–π–ª? (y/n): "
                                ).lower()
                                if save_choice == "y":
                                    filepath = save_code(
                                        result["code"], f"task_{task_id}", task_id
                                    )
                                    if filepath:
                                        print(f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filepath}")

                                        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–¥
                                        run_choice = input(
                                            "–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥? (y/n): "
                                        ).lower()
                                        if run_choice == "y":
                                            try:
                                                print("\nüîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–¥...")
                                                print("-" * 30)
                                                exec(result["code"])
                                                print("-" * 30)
                                                print("‚úÖ –ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                                            except Exception as e:
                                                print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
                            else:
                                print("–û–®–ò–ë–ö–ê –ì–ï–ù–ï–†–ê–¶–ò–ò –ö–û–î–ê:")
                                print("=" * 50)
                                print(f"–û—à–∏–±–∫–∞: {result['error']}")
                                print("Fallback –∫–æ–¥:")
                                print(result["code"])
                                print("=" * 50)
                        else:
                            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏")

                    except ValueError:
                        print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä")

            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ñ–∞–π–ª–∞.")
        except KeyboardInterrupt:
            print("\n\n–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! üëã")
            return


if __name__ == "__main__":
    main()
